group JavaType;

main(ctx, definitions, package) ::= <<
using System.IO;
$if(package)$
namespace $package$
{
$endif$


$definitions$

$if(package)$
}
$endif$
>>

interface(ctx, parent, interface, exports, extension) ::= <<
$javadocpubsub(type="interface", name=interface.name, filename=[ctx.filename, ".idl"])$
public class $interface.name$PubSubType 
{
   $extension$

   $exports$
}
>>

struct_type(ctx, parent, struct, extension, typecode) ::= <<
$javadocpubsub(type="struct", name=struct.name, filename=[ctx.filename, ".idl"])$
public class $struct.name$PubSubType : Halodi.CDR.TopicDataType<$struct.javaTypename$>
{
   public override string Name => "$typecode$";


   
   public override void serialize($struct.javaTypename$ data, MemoryStream stream)
   {
   	  using(BinaryWriter writer = new BinaryWriter(stream))
   	  {
   	  	  Halodi.CDR.CDRSerializer cdr = new Halodi.CDR.CDRSerializer(writer);
   	  	  write(data, cdr); 
   	  }
   }

   
   public override void deserialize(MemoryStream stream, $struct.javaTypename$ data)
   {
   	   using(BinaryReader reader = new BinaryReader(stream))
   	   {
   	   		Halodi.CDR.CDRDeserializer cdr = new Halodi.CDR.CDRDeserializer(reader);
   	   		read(data, cdr); 
   	   }
   }

   public static int getCdrSerializedSize($struct.javaTypename$ data)
   {
      return getCdrSerializedSize(data, 0);
   }

   public static int getCdrSerializedSize($struct.javaTypename$ data, int current_alignment)
   {
      int initial_alignment = current_alignment;

$struct.members : { member |
      $serialized_size(ctx=ctx, object=member, data=["data.", member.name], var="current_alignment")$
}; separator="\n"$

      return current_alignment - initial_alignment;
   }

   public static void write($struct.javaTypename$ data, Halodi.CDR.CDRSerializer cdr)
   {
$struct.members : { member |
      $object_serialization(ctx=ctx, object=member, arg="", element="data.")$
}; separator="\n"$
   }

   public static void read($struct.javaTypename$ data, Halodi.CDR.CDRDeserializer cdr)
   {
$struct.members : { member |
      $object_deserialization(ctx=ctx, object=member, arg="", argsep="", element="data.")$
}; separator=""$
   }


    public static void Copy($struct.javaTypename$ src, $struct.javaTypename$ target)
    {
        target.Set(src);
    }


   $extension$
}$\n$
>>

union_type(ctx, parent, union, extension, typecode) ::= <<
/**
* No pub sub type for Union types is provided. Use struct to define topic data types.
*
*/
>>

enum_type(ctx, parent, enum, extension, typecode) ::= <<
/**
* No pub sub type for Enum types is provided. Use structs to define topic data types.
*
*/
>>
