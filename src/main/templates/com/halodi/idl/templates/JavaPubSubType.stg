group JavaType;

main(ctx, definitions, package) ::= <<
$if(package)$
namespace $package$
{
$endif$


$definitions$

$if(package)$
}
$endif$
>>

interface(ctx, parent, interface, exports, extension) ::= <<
$javadocpubsub(type="interface", name=interface.name, filename=[ctx.filename, ".idl"])$
public class $interface.name$PubSubType 
{
   $extension$

   $exports$
}
>>

struct_type(ctx, parent, struct, extension, typecode) ::= <<
$javadocpubsub(type="struct", name=struct.name, filename=[ctx.filename, ".idl"])$
public class $struct.name$PubSubType : Halodi.TopicDataType<$struct.javaTypename$>
{
   public const string name = "$typecode$";


   private final us.ihmc.idl.CDR serializeCDR = new us.ihmc.idl.CDR();
   private final us.ihmc.idl.CDR deserializeCDR = new us.ihmc.idl.CDR();

   @Override
   public void serialize($struct.javaTypename$ data, us.ihmc.pubsub.common.SerializedPayload serializedPayload) throws java.io.IOException
   {
      serializeCDR.serialize(serializedPayload);
      write(data, serializeCDR);
      serializeCDR.finishSerialize();
   }

   @Override
   public void deserialize(us.ihmc.pubsub.common.SerializedPayload serializedPayload, $struct.javaTypename$ data) throws java.io.IOException
   {
      deserializeCDR.deserialize(serializedPayload);
      read(data, deserializeCDR);
      deserializeCDR.finishDeserialize();
   }

   public final static int getCdrSerializedSize($struct.javaTypename$ data)
   {
      return getCdrSerializedSize(data, 0);
   }

   public final static int getCdrSerializedSize($struct.javaTypename$ data, int current_alignment)
   {
      int initial_alignment = current_alignment;

$struct.members : { member |
      $serialized_size(ctx=ctx, object=member, data=["data.get", member.javaName, "()"], var="current_alignment")$
}; separator="\n"$

      return current_alignment - initial_alignment;
   }

   public static void write($struct.javaTypename$ data, us.ihmc.idl.CDR cdr)
   {
$struct.members : { member |
      $object_serialization(ctx=ctx, object=member, arg="", element="data.")$
}; separator="\n"$
   }

   public static void read($struct.javaTypename$ data, us.ihmc.idl.CDR cdr)
   {
$struct.members : { member |
      $object_deserialization(ctx=ctx, object=member, arg="", argsep="", element="data.")$
}; separator=""$
   }


   public override int getTypeSize()
   {
      return us.ihmc.idl.CDR.getTypeSize(getMaxCdrSerializedSize());
   }

   public override string getName()
   {
      return name;
   }
   
   public void serialize($struct.javaTypename$ data, us.ihmc.idl.CDR cdr)
   {
      write(data, cdr);
   }

   public void deserialize($struct.javaTypename$ data, us.ihmc.idl.CDR cdr)
   {
      read(data, cdr);
   }
   $extension$
}$\n$
>>

union_type(ctx, parent, union, extension, typecode) ::= <<
/**
* No pub sub type for Union types is provided. Use struct to define topic data types.
*
*/
>>

enum_type(ctx, parent, enum, extension, typecode) ::= <<
/**
* No pub sub type for Enum types is provided. Use structs to define topic data types.
*
*/
>>
