group JavaType;

main(ctx, definitions, package) ::= <<
$fileHeader()$
$if(package)$
namespace $package$$\n${$\n\n$
$endif$
$definitions$
>>
interface(ctx, parent, interface, exports, extension) ::= <<
$classdescription(type="interface", name=interface.name, filename=[ctx.filename, ".idl"])$
public interface $interface.name$
{
   $extension$
   $exports$
}
>>

struct_type(ctx, parent, struct, extension, typecode) ::= <<

$struct.comments$
[System.Serializable]
public class $struct.name$
{
$struct.constants : { constant |
   $constant.comments$
$if(constant.typeCode.isType_d)$
   public const string $constant.name$ = $constant.value$;
$elseif(constant.typeCode.isType_9)$
   public const $constant.typeCode.javaTypename$ $constant.name$ = (byte) $constant.value$;
$else$
   public const $constant.typeCode.javaTypename$ $constant.name$ = $constant.value$;
$endif$
}; separator="\n"$
$struct.members : { member |
   $member.comments$
$if(member.hasDefaultValue)$
   public $member.typecode.javaTypename$ $member.name$ = $member.defaultValue$;
$else$
   public $member.typecode.javaTypename$ $member.name$;
$endif$
}; separator="\n"$


   public void set($struct.name$ other)
   {
$struct.members : { member |
$if(member.typecode.primitive)$
      $member.name$ = other.$member.name$;
$elseif(member.typecode.isType_d)$
      $member.name$ = other.$member.name$;
$elseif(member.typecode.isType_f)$
      $array_copy(ctx=ctx, typecodeArr=member.typecode, data=[member.name], other=["other.", member.name], loopvar=ctx.nextLoopVarName, dimensions=member.typecode.dimensions)$
$elseif(member.typecode.isType_a)$
      $member.typecode.pubsubTypename$.staticCopy(other.$member.name$, $member.name$);
$else$
      $member.name$.set(other.$member.name$);
$endif$
}; separator="\n"$
   }


   public override string ToString()
   {
   
      StringBuilder builder = new StringBuilder();

      builder.Append("$struct.name$ {");
$struct.members : { member |
      builder.Append("$member.name$=");
$if(member.typecode.isType_f)$
$if(first(rest(member.typecode.dimensions)))$
      builder.Append(java.util.Arrays.deepToString(this.$member.name$_));
$else$
      builder.Append(java.util.Arrays.toString(this.$member.name$_));
$endif$
$else$
      builder.Append(this.$member.name$_);
$endif$
}; separator="      Append.append(\", \");\n"$
      builder.Append("}");
      return builder.ToString();
   }
$extension$
}$\n$
>>

union_type(ctx, parent, union, extension, typecode) ::= <<
$classdescription(type="union", name=union.name, filename=[ctx.filename, ".idl"])$
public class $union.name$
{

}
>>

enum_type(ctx, parent, enum, extension, typecode) ::= <<
$classdescription(type="enum", name=enum.name, filename=[ctx.filename, ".idl"])$

public enum $enum.name$
{
   $enum.members:{ member |
      $member.name$,
   }; separator="\n"$
   ;
 
   $extension$
}
>>
